{"ast":null,"code":"var _jsxFileName = \"D:\\\\task-mate\\\\task-mate-frontend\\\\src\\\\Components\\\\TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport TaskItem from './TaskItem'; // We'll create this next\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    // Fetch tasks from the API when the component mounts\n    const fetchTasks = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/tasks');\n        setTasks(response.data);\n      } catch (error) {\n        console.error('Error fetching tasks:', error);\n      }\n    };\n    fetchTasks();\n  }, []); // Empty dependency array means this runs only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Task List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 6\n    }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n      task: task\n    }, task._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 8\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 4\n  }, this);\n};\n_s(TaskList, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","useEffect","axios","TaskItem","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","fetchTasks","response","get","data","error","console","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","task","_id","_c","$RefreshReg$"],"sources":["D:/task-mate/task-mate-frontend/src/Components/TaskList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport TaskItem from './TaskItem'; // We'll create this next\r\n\r\nconst TaskList = () => {\r\n const [tasks, setTasks] = useState([]);\r\n\r\n useEffect(() => {\r\n   // Fetch tasks from the API when the component mounts\r\n   const fetchTasks = async () => {\r\n     try {\r\n       const response = await axios.get('http://localhost:5000/tasks');\r\n       setTasks(response.data);\r\n     } catch (error) {\r\n       console.error('Error fetching tasks:', error);\r\n     }\r\n   };\r\n\r\n   fetchTasks();\r\n }, []); // Empty dependency array means this runs only once on mount\r\n\r\n return (\r\n   <div>\r\n     <h2 className=\"text-2xl font-bold mb-4\">Task List</h2>\r\n     {tasks.map(task => (\r\n       <TaskItem key={task._id} task={task} />\r\n     ))}\r\n   </div>\r\n );\r\n};\r\n\r\nexport default TaskList;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,6BAA6B,CAAC;QAC/DH,QAAQ,CAACE,QAAQ,CAACE,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAEDJ,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAIY,SAAS,EAAC,yBAAyB;MAAAD,QAAA,EAAC;IAAS;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrDb,KAAK,CAACc,GAAG,CAACC,IAAI,iBACblB,OAAA,CAACF,QAAQ;MAAgBoB,IAAI,EAAEA;IAAK,GAArBA,IAAI,CAACC,GAAG;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAET,CAAC;AAACd,EAAA,CAzBID,QAAQ;AAAAmB,EAAA,GAARnB,QAAQ;AA2Bd,eAAeA,QAAQ;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}